---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout
	title="Contact Arnaud Hervy - Technical Writer"
	description="Get in touch with Arnaud, an experienced technical writer based in Nantes, France, for your technical writing needs."
>
	<div class="stack gap-15 lg:gap-30">
		<main class="wrapper" id="main-content" tabindex="-1">
			<div class="form-container">
				<form id="contactForm" class="needs-validation" novalidate>
					<div class="form-intro">
						<h1>Contact</h1>
						<p>
							Send me a message about your technical writing needs
							or any questions about my work.
						</p>
					</div>

					<div class="form-row">
						<div class="form-field">
							<label for="firstname">First name (required)</label>
							<input
								type="text"
								name="name"
								id="firstname"
								required
							/>
							<div class="invalid-feedback">
								Please enter your first name.
							</div>
						</div>
						<div class="form-field">
							<label for="lastname">Last name (required)</label>
							<input
								type="text"
								name="last_name"
								id="lastname"
								required
							/>
							<div class="invalid-feedback">
								Please enter your last name.
							</div>
						</div>
					</div>

					<div class="form-row">
						<div class="form-field">
							<label for="email">Email address (required)</label>
							<input
								type="email"
								name="email"
								id="email"
								required
							/>
							<div class="invalid-feedback">
								Please enter a valid email address.
							</div>
						</div>
						<div class="form-field">
							<label for="company">Company</label>
							<input type="text" name="company" id="company" />
						</div>
					</div>

					<div class="form-field">
						<label for="message">Message (required)</label>
						<textarea rows="5" name="message" id="message" required
						></textarea>
						<div class="invalid-feedback">
							Please enter your message.
						</div>
					</div>

					<div class="form-field honeypot">
						<label for="website">Website (leave empty)</label>
						<input
							type="text"
							name="website"
							id="website"
							tabindex="-1"
							autocomplete="off"
						/>
					</div>

					<button
						type="submit"
						aria-label="Send your message to Arnaud Hervy"
					>
						<span class="button-text">Send message</span>
						<span class="button-loading" style="display: none;"
							>Sending...</span
						>
					</button>

					<p id="result" role="status" aria-live="polite"></p>
				</form>
			</div>
		</main>
	</div>

	<script is:inline>
		(function () {
			"use strict";

			const form = document.getElementById("contactForm");
			const result = document.getElementById("result");
			const submitButton = form.querySelector('button[type="submit"]');
			const buttonText = submitButton.querySelector(".button-text");
			const buttonLoading = submitButton.querySelector(".button-loading");

			const WORKER_URL =
				"https://contact-form-handler.arnaud-hervy.workers.dev";

			const ERROR_MESSAGES = {
				network:
					"Connection problem. Check your internet and try again.",
				server: "Server error. Please try again in a few minutes.",
				validation: "Please check your information and try again.",
				unknown: "An unexpected error occurred. Please try again.",
			};

			function showMessage(message, type = "error") {
				result.innerHTML = message;
				if (type === "success") {
					result.classList.add("text-green-500");
					result.classList.remove("text-red-500");
				} else {
					result.classList.add("text-red-500");
					result.classList.remove("text-green-500");
				}

				// Auto-hide after 7s for success, 10s for errors
				const hideDelay = type === "success" ? 7000 : 10000;
				setTimeout(() => {
					result.style.opacity = "0";
					setTimeout(() => {
						result.innerHTML = "";
						result.className = "";
						result.style.opacity = "1";
					}, 300);
				}, hideDelay);
			}

			function setLoading(isLoading) {
				submitButton.disabled = isLoading;
				if (isLoading) {
					buttonText.classList.add("hidden");
					buttonText.classList.remove("visible");
					buttonLoading.classList.add("visible");
					buttonLoading.classList.remove("hidden");
				} else {
					buttonText.classList.add("visible");
					buttonText.classList.remove("hidden");
					buttonLoading.classList.add("hidden");
					buttonLoading.classList.remove("visible");
				}
			}

			form.addEventListener("submit", async function (event) {
				event.preventDefault();
				event.stopPropagation();

				// Client-side validation with error handling
				if (!form.checkValidity()) {
					const firstInvalid = form.querySelector(":invalid");
					if (firstInvalid) {
						firstInvalid.focus();
					}
					form.classList.add("was-validated");
					return;
				}

				setLoading(true);
				result.innerHTML = "";
				result.className = "";

				let timeoutId;

				try {
					const formData = new FormData(form);
					const data = {};
					formData.forEach((value, key) => {
						data[key] = value.trim();
					});

					// Honeypot check - if filled, it's likely a bot
					if (data.website) {
						showMessage("Form submission failed. Please try again.");
						return;
					}

					// Remove honeypot from data before sending
					delete data.website;

					// Additional client-side validation
					if (!data.name || !data.last_name || !data.email || !data.message) {
						showMessage(ERROR_MESSAGES.validation);
						return;
					}

					// Send to Worker with timeout
					const controller = new AbortController();
					timeoutId = setTimeout(
						() => controller.abort(),
						30000,
					); // 30s timeout

					const response = await fetch(WORKER_URL, {
						method: "POST",
						headers: {
							"Content-Type": "application/json",
						},
						body: JSON.stringify(data),
						signal: controller.signal,
					});

					if (!response.ok) {
						// Specific error code handling
						let errorMessage;
						switch (response.status) {
							case 400:
								errorMessage = ERROR_MESSAGES.validation;
								break;
							case 429:
								errorMessage =
									"Too many attempts. Please wait before trying again.";
								break;
							case 500:
							case 502:
							case 503:
								errorMessage = ERROR_MESSAGES.server;
								break;
							default:
								errorMessage = ERROR_MESSAGES.unknown;
						}
						showMessage(errorMessage);
						return;
					}

					const responseData = await response.json();

					if (responseData.success) {
						// Success
						showMessage(
							responseData.message ||
								"Message sent successfully!",
							"success",
						);
						form.reset();
						form.classList.remove("was-validated");
					} else {
						// Server error with message
						showMessage(
							responseData.message || ERROR_MESSAGES.unknown,
						);
					}
				} catch (error) {
					console.error("Error sending form:", error);

					// Handle specific error types
					if (error.name === "AbortError") {
						showMessage("Request timeout. Please try again.");
					} else if (!navigator.onLine) {
						showMessage(ERROR_MESSAGES.network);
					} else {
						showMessage(ERROR_MESSAGES.unknown);
					}
				} finally {
					// Always cleanup timeout and reset loading state
					if (timeoutId) {
						clearTimeout(timeoutId);
					}
					setLoading(false);
				}
			});
		})();
	</script>

	<style>
		.invalid-feedback,
		.empty-feedback {
			display: none;
			font-size: var(--text-sm);
			color: #dc3545;
			margin-bottom: 1.5rem;
		}

		.was-validated :placeholder-shown:invalid ~ .empty-feedback {
			display: block;
		}

		.was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
			display: block;
		}

		.is-invalid,
		.was-validated :invalid {
			border-color: #dc3545;
		}

		.form-container {
			justify-content: center;
			align-items: center;
			min-height: 80vh;
		}

		h1 {
			font-size: var(--text-4xl);
			margin-bottom: 0.5rem;
		}

		form {
			max-width: 600px;
			width: 90%;
			margin: 0 auto;
		}

		.form-intro {
			text-align: start;
			margin-bottom: 1.5em;
		}

		label {
			display: block;
			margin-bottom: 0.3125em;
			font-weight: bold;
		}

		input[type="text"],
		input[type="email"],
		textarea {
			width: 100%;
			padding: 0.625em;
			margin-bottom: 0.625em;
			border: 3px solid #ccc;
			border-radius: 3px;
			box-sizing: border-box;
			transition: border-color 0.2s ease, box-shadow 0.2s ease;
		}

		/* Improved focus states for better accessibility */
		input[type="text"]:focus,
		input[type="email"]:focus,
		textarea:focus {
			outline: 2px solid var(--accent-regular);
			outline-offset: 2px;
			border-color: var(--accent-regular);
			box-shadow: 0 0 0 3px rgba(var(--accent-regular-rgb, 59, 130, 246), 0.1);
		}

		button[type="submit"] {
			position: relative;
			display: flex;
			place-content: center;
			align-items: center;
			text-align: center;
			padding: 0.56em 2em;
			gap: 0.8em;
			color: var(--accent-text-over);
			text-decoration: none;
			line-height: 1.1;
			border-radius: 999rem;
			overflow: hidden;
			background: var(--accent-regular);
			white-space: nowrap;
			border: none;
			cursor: pointer;
			transition: opacity 0.3s ease, transform 0.2s ease;
		}

		button[type="submit"]:hover:not(:disabled) {
			transform: translateY(-1px);
		}

		button[type="submit"]:disabled {
			opacity: 0.7;
			cursor: not-allowed;
			transform: none;
		}

		.button-text.hidden,
		.button-loading.hidden {
			display: none;
		}

		.button-text.visible,
		.button-loading.visible {
			display: inline;
		}

		.button-text,
		.button-loading {
			transition: opacity 0.2s ease;
		}

		.form-row {
			display: flex;
			flex-direction: column;
			gap: 0.625em;
		}

		.form-field {
			flex: 1;
		}

		.honeypot {
			position: absolute !important;
			left: -9999px !important;
			width: 1px !important;
			height: 1px !important;
			overflow: hidden !important;
			clip: rect(0, 0, 0, 0) !important;
			white-space: nowrap !important;
		}

		/* Status messages */
		.text-green-500 {
			color: #10b981;
			font-weight: 500;
		}

		.text-red-500 {
			color: #ef4444;
			font-weight: 500;
		}

		#result {
			margin-top: 1rem;
			font-weight: 500;
			transition: opacity 0.3s ease;
			min-height: 1.5rem;
		}

		/* Loading animation */
		.button-loading {
			display: inline-flex;
			align-items: center;
			gap: 0.5rem;
		}

		.button-loading::after {
			content: "";
			width: 16px;
			height: 16px;
			border: 2px solid transparent;
			border-top-color: currentColor;
			border-radius: 50%;
			animation: spin 1s linear infinite;
		}

		@keyframes spin {
			to {
				transform: rotate(360deg);
			}
		}

		@media (min-width: 20em) {
			button[type="submit"] {
				font-size: var(--text-lg);
			}
		}

		button[type="submit"]::after {
			content: "";
			position: absolute;
			inset: 0;
			pointer-events: none;
			transition: background-color var(--theme-transition);
			mix-blend-mode: overlay;
		}

		button[type="submit"]:focus::after,
		button[type="submit"]:hover::after {
			background-color: hsla(var(--gray-999-basis), 0.3);
		}

		@media (min-width: 50em) {
			button[type="submit"] {
				padding: 1.125rem 2.5rem;
				font-size: var(--text-lg);
			}

			h1 {
				text-align: start;
			}

			.form-row {
				flex-direction: row;
			}
		}

		/* Enhanced error state styling */
		.was-validated input:invalid,
		.was-validated textarea:invalid {
			border-color: #dc3545;
			box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
		}

		.was-validated input:valid,
		.was-validated textarea:valid {
			border-color: #28a745;
		}
	</style>
</BaseLayout>